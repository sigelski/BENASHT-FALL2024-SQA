#!/bin/bash

### COMP-5710 Final Project ###
### 5a - Create a Git Hook that will run and report all security weaknesses in the project in a CSV file whenever a Python file is changed and committed. (20%)

REPORT="security_vulnerability_report.csv"

# Create separate temporary files, otherwise scanning multiple files shows no security issues?
TEMP_FILES=$(mktemp)
TEMP_CONTENT=$(mktemp)
BANDIT_TEMP="temp_sec.csv"

# Ensure temporary files are removed on exit
trap 'rm -f "$TEMP_FILES" "$TEMP_CONTENT" "$BANDIT_TEMP"' EXIT

# Get the list of all staged Python files if there are any (should be).
git diff --cached --name-only --diff-filter=ACMR | grep -i '\.py$' > "$TEMP_FILES"

echo "Files to scan:" 
cat "$TEMP_FILES"

if [ -s "$TEMP_FILES" ]; then
    echo "Security scan running."

    echo "filename,test_name,test_id,issue_severity,issue_confidence,issue_cwe,issue_text,line_number,line_range,,,more_info" > "$REPORT"

    # Run Bandit on each staged Python file, and append the results to the REPORT.
    while IFS= read -r file
    do
        git show ":$file" > "$TEMP_CONTENT" 2>/dev/null

        if [ $? -eq 0 ] && [ -s "$TEMP_CONTENT" ]; then
            bandit -f csv -o "$BANDIT_TEMP" "$TEMP_CONTENT"

            if [ -s "$BANDIT_TEMP" ]; then
                sed "s|^|$file,|" "$BANDIT_TEMP" | tail -n +2 >> "$REPORT"
            fi
        else
            echo "Failed to retrieve staged version of $file"
        fi
    done < "$TEMP_FILES"

    if [ $(wc -l < "$REPORT") -gt 1 ]; then
        echo "Security issues detected by Bandit. See $REPORT for details."
    else
        echo "No security issues found by Bandit."
        rm "$REPORT"
    fi
else
    echo "No Python files staged for commit. Skipping Bandit scan."
fi

exit 0